digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] aws_apigatewayv2_api.example (expand)" [label = "aws_apigatewayv2_api.example", shape = "box"]
		"[root] aws_apigatewayv2_integration.example (expand)" [label = "aws_apigatewayv2_integration.example", shape = "box"]
		"[root] aws_apigatewayv2_route.example (expand)" [label = "aws_apigatewayv2_route.example", shape = "box"]
		"[root] aws_apigatewayv2_stage.default (expand)" [label = "aws_apigatewayv2_stage.default", shape = "box"]
		"[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)" [label = "module.cloudwatch_log-group.aws_cloudwatch_log_group.this", shape = "box"]
		"[root] module.crowdsec.aws_api_gateway_authorizer.gateway_authorizer (expand)" [label = "module.crowdsec.aws_api_gateway_authorizer.gateway_authorizer", shape = "box"]
		"[root] module.crowdsec.aws_apigatewayv2_authorizer.gateway_authorizer (expand)" [label = "module.crowdsec.aws_apigatewayv2_authorizer.gateway_authorizer", shape = "box"]
		"[root] module.crowdsec.aws_cloudwatch_log_group.crowdsec-lapi (expand)" [label = "module.crowdsec.aws_cloudwatch_log_group.crowdsec-lapi", shape = "box"]
		"[root] module.crowdsec.aws_db_subnet_group.dbsubnet (expand)" [label = "module.crowdsec.aws_db_subnet_group.dbsubnet", shape = "box"]
		"[root] module.crowdsec.aws_ecs_cluster.crowdsec-lapi (expand)" [label = "module.crowdsec.aws_ecs_cluster.crowdsec-lapi", shape = "box"]
		"[root] module.crowdsec.aws_ecs_service.crowdsec-service (expand)" [label = "module.crowdsec.aws_ecs_service.crowdsec-service", shape = "box"]
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" [label = "module.crowdsec.aws_ecs_task_definition.crowdsec-lapi", shape = "box"]
		"[root] module.crowdsec.aws_iam_role.ecs_task_execution_role (expand)" [label = "module.crowdsec.aws_iam_role.ecs_task_execution_role", shape = "box"]
		"[root] module.crowdsec.aws_iam_role_policy.lapi-cloudwatch-policy (expand)" [label = "module.crowdsec.aws_iam_role_policy.lapi-cloudwatch-policy", shape = "box"]
		"[root] module.crowdsec.aws_iam_role_policy.lapi-exec-policy (expand)" [label = "module.crowdsec.aws_iam_role_policy.lapi-exec-policy", shape = "box"]
		"[root] module.crowdsec.aws_rds_cluster.csdb (expand)" [label = "module.crowdsec.aws_rds_cluster.csdb", shape = "box"]
		"[root] module.crowdsec.aws_service_discovery_private_dns_namespace.crowdsec (expand)" [label = "module.crowdsec.aws_service_discovery_private_dns_namespace.crowdsec", shape = "box"]
		"[root] module.crowdsec.aws_service_discovery_service.crowdsec (expand)" [label = "module.crowdsec.aws_service_discovery_service.crowdsec", shape = "box"]
		"[root] module.crowdsec.data.aws_availability_zones.az (expand)" [label = "module.crowdsec.data.aws_availability_zones.az", shape = "box"]
		"[root] module.crowdsec.data.aws_iam_policy_document.ecs_task_execution_role (expand)" [label = "module.crowdsec.data.aws_iam_policy_document.ecs_task_execution_role", shape = "box"]
		"[root] module.crowdsec.data.aws_region.current (expand)" [label = "module.crowdsec.data.aws_region.current", shape = "box"]
		"[root] module.crowdsec.data.template_file.cs_acquis (expand)" [label = "module.crowdsec.data.template_file.cs_acquis", shape = "box"]
		"[root] module.crowdsec.data.template_file.cs_config (expand)" [label = "module.crowdsec.data.template_file.cs_config", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" [label = "module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_inline (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.additional_inline", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_json (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.additional_json", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.async (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.async", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.dead_letter (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.dead_letter", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.logs (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.logs", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.tracing (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.tracing", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.vpc (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_policy.vpc", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role.lambda", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_inline (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_inline", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_json (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_json", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_jsons (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_jsons", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_one (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_one", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.async (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.async", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.dead_letter (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.dead_letter", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.logs (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.logs", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.tracing (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.tracing", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.vpc (expand)" [label = "module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.vpc", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)" [label = "module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" [label = "module.crowdsec.module.authorizer.aws_lambda_function.this", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" [label = "module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" [label = "module.crowdsec.module.authorizer.aws_lambda_layer_version.this", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.current_version_triggers (expand)" [label = "module.crowdsec.module.authorizer.aws_lambda_permission.current_version_triggers", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.unqualified_alias_triggers (expand)" [label = "module.crowdsec.module.authorizer.aws_lambda_permission.unqualified_alias_triggers", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_lambda_provisioned_concurrency_config.current_version (expand)" [label = "module.crowdsec.module.authorizer.aws_lambda_provisioned_concurrency_config.current_version", shape = "box"]
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" [label = "module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_arn.log_group_arn (expand)" [label = "module.crowdsec.module.authorizer.data.aws_arn.log_group_arn", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" [label = "module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.tracing (expand)" [label = "module.crowdsec.module.authorizer.data.aws_iam_policy.tracing", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.vpc (expand)" [label = "module.crowdsec.module.authorizer.data.aws_iam_policy.vpc", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.additional_inline (expand)" [label = "module.crowdsec.module.authorizer.data.aws_iam_policy_document.additional_inline", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.assume_role (expand)" [label = "module.crowdsec.module.authorizer.data.aws_iam_policy_document.assume_role", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.async (expand)" [label = "module.crowdsec.module.authorizer.data.aws_iam_policy_document.async", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.dead_letter (expand)" [label = "module.crowdsec.module.authorizer.data.aws_iam_policy_document.dead_letter", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.logs (expand)" [label = "module.crowdsec.module.authorizer.data.aws_iam_policy_document.logs", shape = "box"]
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" [label = "module.crowdsec.module.authorizer.data.external.archive_prepare", shape = "box"]
		"[root] module.crowdsec.module.authorizer.local_file.archive_plan (expand)" [label = "module.crowdsec.module.authorizer.local_file.archive_plan", shape = "box"]
		"[root] module.crowdsec.module.authorizer.null_resource.archive (expand)" [label = "module.crowdsec.module.authorizer.null_resource.archive", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group.this", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self", shape = "box"]
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id (expand)" [label = "module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)" [label = "module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)" [label = "module.crowdsec.module.vpc.aws_customer_gateway.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)" [label = "module.crowdsec.module.vpc.aws_db_subnet_group.database", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" [label = "module.crowdsec.module.vpc.aws_default_network_acl.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)" [label = "module.crowdsec.module.vpc.aws_default_route_table.default", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)" [label = "module.crowdsec.module.vpc.aws_default_security_group.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" [label = "module.crowdsec.module.vpc.aws_default_vpc.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)" [label = "module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" [label = "module.crowdsec.module.vpc.aws_eip.nat", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)" [label = "module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" [label = "module.crowdsec.module.vpc.aws_flow_log.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch (expand)" [label = "module.crowdsec.module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch (expand)" [label = "module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch (expand)" [label = "module.crowdsec.module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)" [label = "module.crowdsec.module.vpc.aws_internet_gateway.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)" [label = "module.crowdsec.module.vpc.aws_nat_gateway.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl.database", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl.elasticache", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl.intra", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl.outpost", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl.private", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl.public", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl.redshift", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_inbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.database_inbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_outbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.database_outbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_inbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_inbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_outbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_outbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_inbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.intra_inbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_outbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.intra_outbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_inbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.outpost_inbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_outbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.outpost_outbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_inbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.private_inbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_outbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.private_outbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_inbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.public_inbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_outbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.public_outbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_inbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.redshift_inbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_outbound (expand)" [label = "module.crowdsec.module.vpc.aws_network_acl_rule.redshift_outbound", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift (expand)" [label = "module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route.database_internet_gateway (expand)" [label = "module.crowdsec.module.vpc.aws_route.database_internet_gateway", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route.database_ipv6_egress (expand)" [label = "module.crowdsec.module.vpc.aws_route.database_ipv6_egress", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route.database_nat_gateway (expand)" [label = "module.crowdsec.module.vpc.aws_route.database_nat_gateway", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route.private_ipv6_egress (expand)" [label = "module.crowdsec.module.vpc.aws_route.private_ipv6_egress", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route.private_nat_gateway (expand)" [label = "module.crowdsec.module.vpc.aws_route.private_nat_gateway", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway (expand)" [label = "module.crowdsec.module.vpc.aws_route.public_internet_gateway", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway_ipv6 (expand)" [label = "module.crowdsec.module.vpc.aws_route.public_internet_gateway_ipv6", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" [label = "module.crowdsec.module.vpc.aws_route_table.database", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)" [label = "module.crowdsec.module.vpc.aws_route_table.elasticache", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)" [label = "module.crowdsec.module.vpc.aws_route_table.intra", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table.private (expand)" [label = "module.crowdsec.module.vpc.aws_route_table.private", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table.public (expand)" [label = "module.crowdsec.module.vpc.aws_route_table.public", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)" [label = "module.crowdsec.module.vpc.aws_route_table.redshift", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.database (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.database", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.elasticache (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.elasticache", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.intra (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.intra", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.outpost (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.outpost", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.private (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.private", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.public (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.public", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.redshift", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)" [label = "module.crowdsec.module.vpc.aws_route_table_association.redshift_public", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" [label = "module.crowdsec.module.vpc.aws_subnet.database", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" [label = "module.crowdsec.module.vpc.aws_subnet.elasticache", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" [label = "module.crowdsec.module.vpc.aws_subnet.intra", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" [label = "module.crowdsec.module.vpc.aws_subnet.outpost", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" [label = "module.crowdsec.module.vpc.aws_subnet.private", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" [label = "module.crowdsec.module.vpc.aws_subnet.public", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" [label = "module.crowdsec.module.vpc.aws_subnet.redshift", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" [label = "module.crowdsec.module.vpc.aws_vpc.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" [label = "module.crowdsec.module.vpc.aws_vpc_dhcp_options.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options_association.this (expand)" [label = "module.crowdsec.module.vpc.aws_vpc_dhcp_options_association.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpc_ipv4_cidr_block_association.this (expand)" [label = "module.crowdsec.module.vpc.aws_vpc_ipv4_cidr_block_association.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)" [label = "module.crowdsec.module.vpc.aws_vpn_gateway.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this (expand)" [label = "module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra (expand)" [label = "module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private (expand)" [label = "module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private", shape = "box"]
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public (expand)" [label = "module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public", shape = "box"]
		"[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role (expand)" [label = "module.crowdsec.module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role", shape = "box"]
		"[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch (expand)" [label = "module.crowdsec.module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch", shape = "box"]
		"[root] module.crowdsec.random_password.bouncer_key (expand)" [label = "module.crowdsec.random_password.bouncer_key", shape = "box"]
		"[root] module.crowdsec.random_password.csdbpassword (expand)" [label = "module.crowdsec.random_password.csdbpassword", shape = "box"]
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" [label = "module.lambda.aws_cloudwatch_log_group.lambda", shape = "box"]
		"[root] module.lambda.aws_iam_policy.additional_inline (expand)" [label = "module.lambda.aws_iam_policy.additional_inline", shape = "box"]
		"[root] module.lambda.aws_iam_policy.additional_json (expand)" [label = "module.lambda.aws_iam_policy.additional_json", shape = "box"]
		"[root] module.lambda.aws_iam_policy.additional_jsons (expand)" [label = "module.lambda.aws_iam_policy.additional_jsons", shape = "box"]
		"[root] module.lambda.aws_iam_policy.async (expand)" [label = "module.lambda.aws_iam_policy.async", shape = "box"]
		"[root] module.lambda.aws_iam_policy.dead_letter (expand)" [label = "module.lambda.aws_iam_policy.dead_letter", shape = "box"]
		"[root] module.lambda.aws_iam_policy.logs (expand)" [label = "module.lambda.aws_iam_policy.logs", shape = "box"]
		"[root] module.lambda.aws_iam_policy.tracing (expand)" [label = "module.lambda.aws_iam_policy.tracing", shape = "box"]
		"[root] module.lambda.aws_iam_policy.vpc (expand)" [label = "module.lambda.aws_iam_policy.vpc", shape = "box"]
		"[root] module.lambda.aws_iam_role.lambda (expand)" [label = "module.lambda.aws_iam_role.lambda", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_inline (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.additional_inline", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_json (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.additional_json", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_jsons (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.additional_jsons", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_many (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.additional_many", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_one (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.additional_one", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.async (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.async", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.dead_letter (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.dead_letter", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.logs (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.logs", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.tracing (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.tracing", shape = "box"]
		"[root] module.lambda.aws_iam_role_policy_attachment.vpc (expand)" [label = "module.lambda.aws_iam_role_policy_attachment.vpc", shape = "box"]
		"[root] module.lambda.aws_lambda_event_source_mapping.this (expand)" [label = "module.lambda.aws_lambda_event_source_mapping.this", shape = "box"]
		"[root] module.lambda.aws_lambda_function.this (expand)" [label = "module.lambda.aws_lambda_function.this", shape = "box"]
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" [label = "module.lambda.aws_lambda_function_event_invoke_config.this", shape = "box"]
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" [label = "module.lambda.aws_lambda_layer_version.this", shape = "box"]
		"[root] module.lambda.aws_lambda_permission.current_version_triggers (expand)" [label = "module.lambda.aws_lambda_permission.current_version_triggers", shape = "box"]
		"[root] module.lambda.aws_lambda_permission.unqualified_alias_triggers (expand)" [label = "module.lambda.aws_lambda_permission.unqualified_alias_triggers", shape = "box"]
		"[root] module.lambda.aws_lambda_provisioned_concurrency_config.current_version (expand)" [label = "module.lambda.aws_lambda_provisioned_concurrency_config.current_version", shape = "box"]
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" [label = "module.lambda.aws_s3_bucket_object.lambda_package", shape = "box"]
		"[root] module.lambda.data.aws_arn.log_group_arn (expand)" [label = "module.lambda.data.aws_arn.log_group_arn", shape = "box"]
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" [label = "module.lambda.data.aws_cloudwatch_log_group.lambda", shape = "box"]
		"[root] module.lambda.data.aws_iam_policy.tracing (expand)" [label = "module.lambda.data.aws_iam_policy.tracing", shape = "box"]
		"[root] module.lambda.data.aws_iam_policy.vpc (expand)" [label = "module.lambda.data.aws_iam_policy.vpc", shape = "box"]
		"[root] module.lambda.data.aws_iam_policy_document.additional_inline (expand)" [label = "module.lambda.data.aws_iam_policy_document.additional_inline", shape = "box"]
		"[root] module.lambda.data.aws_iam_policy_document.assume_role (expand)" [label = "module.lambda.data.aws_iam_policy_document.assume_role", shape = "box"]
		"[root] module.lambda.data.aws_iam_policy_document.async (expand)" [label = "module.lambda.data.aws_iam_policy_document.async", shape = "box"]
		"[root] module.lambda.data.aws_iam_policy_document.dead_letter (expand)" [label = "module.lambda.data.aws_iam_policy_document.dead_letter", shape = "box"]
		"[root] module.lambda.data.aws_iam_policy_document.logs (expand)" [label = "module.lambda.data.aws_iam_policy_document.logs", shape = "box"]
		"[root] module.lambda.data.external.archive_prepare (expand)" [label = "module.lambda.data.external.archive_prepare", shape = "box"]
		"[root] module.lambda.local_file.archive_plan (expand)" [label = "module.lambda.local_file.archive_plan", shape = "box"]
		"[root] module.lambda.null_resource.archive (expand)" [label = "module.lambda.null_resource.archive", shape = "box"]
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"]" [label = "provider[\"registry.terraform.io/hashicorp/aws\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/external\"]" [label = "provider[\"registry.terraform.io/hashicorp/external\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/local\"]" [label = "provider[\"registry.terraform.io/hashicorp/local\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/null\"]" [label = "provider[\"registry.terraform.io/hashicorp/null\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/random\"]" [label = "provider[\"registry.terraform.io/hashicorp/random\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/template\"]" [label = "provider[\"registry.terraform.io/hashicorp/template\"]", shape = "diamond"]
		"[root] aws_apigatewayv2_api.example (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] aws_apigatewayv2_integration.example (expand)" -> "[root] aws_apigatewayv2_api.example (expand)"
		"[root] aws_apigatewayv2_integration.example (expand)" -> "[root] module.lambda.output.lambda_function_invoke_arn (expand)"
		"[root] aws_apigatewayv2_route.example (expand)" -> "[root] aws_apigatewayv2_integration.example (expand)"
		"[root] aws_apigatewayv2_route.example (expand)" -> "[root] module.crowdsec.output.aws_apigatewayv2_authorizer_id (expand)"
		"[root] aws_apigatewayv2_stage.default (expand)" -> "[root] module.cloudwatch_log-group.output.cloudwatch_log_group_arn (expand)"
		"[root] module.cloudwatch_log-group (close)" -> "[root] module.cloudwatch_log-group.output.cloudwatch_log_group_arn (expand)"
		"[root] module.cloudwatch_log-group (close)" -> "[root] module.cloudwatch_log-group.output.cloudwatch_log_group_name (expand)"
		"[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)" -> "[root] module.cloudwatch_log-group.var.create (expand)"
		"[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)" -> "[root] module.cloudwatch_log-group.var.kms_key_id (expand)"
		"[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)" -> "[root] module.cloudwatch_log-group.var.name (expand)"
		"[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)" -> "[root] module.cloudwatch_log-group.var.name_prefix (expand)"
		"[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)" -> "[root] module.cloudwatch_log-group.var.retention_in_days (expand)"
		"[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)" -> "[root] module.cloudwatch_log-group.var.tags (expand)"
		"[root] module.cloudwatch_log-group.output.cloudwatch_log_group_arn (expand)" -> "[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)"
		"[root] module.cloudwatch_log-group.output.cloudwatch_log_group_name (expand)" -> "[root] module.cloudwatch_log-group.aws_cloudwatch_log_group.this (expand)"
		"[root] module.cloudwatch_log-group.var.create (expand)" -> "[root] module.cloudwatch_log-group (expand)"
		"[root] module.cloudwatch_log-group.var.kms_key_id (expand)" -> "[root] module.cloudwatch_log-group (expand)"
		"[root] module.cloudwatch_log-group.var.name (expand)" -> "[root] aws_apigatewayv2_api.example (expand)"
		"[root] module.cloudwatch_log-group.var.name (expand)" -> "[root] module.cloudwatch_log-group (expand)"
		"[root] module.cloudwatch_log-group.var.name_prefix (expand)" -> "[root] module.cloudwatch_log-group (expand)"
		"[root] module.cloudwatch_log-group.var.retention_in_days (expand)" -> "[root] module.cloudwatch_log-group (expand)"
		"[root] module.cloudwatch_log-group.var.tags (expand)" -> "[root] module.cloudwatch_log-group (expand)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.aws_api_gateway_authorizer.gateway_authorizer (expand)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.aws_cloudwatch_log_group.crowdsec-lapi (expand)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.aws_ecs_service.crowdsec-service (expand)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.aws_iam_role_policy.lapi-cloudwatch-policy (expand)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.aws_iam_role_policy.lapi-exec-policy (expand)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.module.authorizer (close)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.module.crowdsec-sg (close)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.module.vpc (close)"
		"[root] module.crowdsec (close)" -> "[root] module.crowdsec.output.aws_apigatewayv2_authorizer_id (expand)"
		"[root] module.crowdsec.aws_api_gateway_authorizer.gateway_authorizer (expand)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_invoke_arn (expand)"
		"[root] module.crowdsec.aws_api_gateway_authorizer.gateway_authorizer (expand)" -> "[root] module.crowdsec.var.aws_apigateway_id (expand)"
		"[root] module.crowdsec.aws_apigatewayv2_authorizer.gateway_authorizer (expand)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_invoke_arn (expand)"
		"[root] module.crowdsec.aws_apigatewayv2_authorizer.gateway_authorizer (expand)" -> "[root] module.crowdsec.var.aws_apigateway_v2_id (expand)"
		"[root] module.crowdsec.aws_cloudwatch_log_group.crowdsec-lapi (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.aws_cloudwatch_log_group.crowdsec-lapi (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.aws_db_subnet_group.dbsubnet (expand)" -> "[root] module.crowdsec.module.vpc.output.private_subnets (expand)"
		"[root] module.crowdsec.aws_ecs_cluster.crowdsec-lapi (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.aws_ecs_cluster.crowdsec-lapi (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.aws_ecs_service.crowdsec-service (expand)" -> "[root] module.crowdsec.aws_ecs_cluster.crowdsec-lapi (expand)"
		"[root] module.crowdsec.aws_ecs_service.crowdsec-service (expand)" -> "[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)"
		"[root] module.crowdsec.aws_ecs_service.crowdsec-service (expand)" -> "[root] module.crowdsec.aws_service_discovery_service.crowdsec (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.aws_iam_role.ecs_task_execution_role (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.data.template_file.cs_acquis (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.data.template_file.cs_config (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.local.profiles (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.random_password.bouncer_key (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.var.collections (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.var.crowdsec_cpu (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.var.crowdsec_memory (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.var.parsers (expand)"
		"[root] module.crowdsec.aws_ecs_task_definition.crowdsec-lapi (expand)" -> "[root] module.crowdsec.var.scenarios (expand)"
		"[root] module.crowdsec.aws_iam_role.ecs_task_execution_role (expand)" -> "[root] module.crowdsec.data.aws_iam_policy_document.ecs_task_execution_role (expand)"
		"[root] module.crowdsec.aws_iam_role_policy.lapi-cloudwatch-policy (expand)" -> "[root] module.crowdsec.aws_iam_role.ecs_task_execution_role (expand)"
		"[root] module.crowdsec.aws_iam_role_policy.lapi-exec-policy (expand)" -> "[root] module.crowdsec.aws_iam_role.ecs_task_execution_role (expand)"
		"[root] module.crowdsec.aws_rds_cluster.csdb (expand)" -> "[root] module.crowdsec.aws_db_subnet_group.dbsubnet (expand)"
		"[root] module.crowdsec.aws_rds_cluster.csdb (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.output.security_group_id (expand)"
		"[root] module.crowdsec.aws_rds_cluster.csdb (expand)" -> "[root] module.crowdsec.random_password.csdbpassword (expand)"
		"[root] module.crowdsec.aws_service_discovery_private_dns_namespace.crowdsec (expand)" -> "[root] module.crowdsec.module.vpc.output.vpc_id (expand)"
		"[root] module.crowdsec.aws_service_discovery_service.crowdsec (expand)" -> "[root] module.crowdsec.aws_service_discovery_private_dns_namespace.crowdsec (expand)"
		"[root] module.crowdsec.data.aws_availability_zones.az (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.data.aws_availability_zones.az (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.data.aws_iam_policy_document.ecs_task_execution_role (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.data.aws_iam_policy_document.ecs_task_execution_role (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.data.aws_region.current (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.data.aws_region.current (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.data.template_file.cs_acquis (expand)" -> "[root] module.crowdsec.data.aws_region.current (expand)"
		"[root] module.crowdsec.data.template_file.cs_acquis (expand)" -> "[root] module.crowdsec.local.acquis (expand)"
		"[root] module.crowdsec.data.template_file.cs_acquis (expand)" -> "[root] module.crowdsec.var.cloudwatch_group_name (expand)"
		"[root] module.crowdsec.data.template_file.cs_acquis (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/template\"]"
		"[root] module.crowdsec.data.template_file.cs_config (expand)" -> "[root] module.crowdsec.aws_rds_cluster.csdb (expand)"
		"[root] module.crowdsec.data.template_file.cs_config (expand)" -> "[root] module.crowdsec.local.config (expand)"
		"[root] module.crowdsec.data.template_file.cs_config (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/template\"]"
		"[root] module.crowdsec.local.acquis (expand)" -> "[root] module.crowdsec.var.acquis (expand)"
		"[root] module.crowdsec.local.allowed_triggers (expand)" -> "[root] module.crowdsec.var.aws_apigateway_api_execution_arn (expand)"
		"[root] module.crowdsec.local.allowed_triggers (expand)" -> "[root] module.crowdsec.var.aws_apigateway_id (expand)"
		"[root] module.crowdsec.local.allowed_triggers (expand)" -> "[root] module.crowdsec.var.aws_apigateway_v2_api_execution_arn (expand)"
		"[root] module.crowdsec.local.allowed_triggers (expand)" -> "[root] module.crowdsec.var.aws_apigateway_v2_id (expand)"
		"[root] module.crowdsec.local.config (expand)" -> "[root] module.crowdsec.var.config (expand)"
		"[root] module.crowdsec.local.profiles (expand)" -> "[root] module.crowdsec.var.profiles (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_inline (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_json (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_jsons (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_one (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.async (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.dead_letter (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.logs (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.tracing (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.vpc (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_permission.current_version_triggers (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_permission.unqualified_alias_triggers (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_provisioned_concurrency_config.current_version (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_cloudwatch_log_group_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_cloudwatch_log_group_name (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_function_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_state (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_state_transition_reason (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_uuid (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_invoke_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_kms_key_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_last_modified (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_name (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_qualified_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_source_code_hash (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_source_code_size (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_function_version (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_layer_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_layer_created_date (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_layer_layer_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_layer_source_code_size (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_layer_version (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_role_arn (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_role_name (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.lambda_role_unique_id (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.local_filename (expand)"
		"[root] module.crowdsec.module.authorizer (close)" -> "[root] module.crowdsec.module.authorizer.output.s3_object (expand)"
		"[root] module.crowdsec.module.authorizer (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.cloudwatch_logs_kms_key_id (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.cloudwatch_logs_retention_in_days (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.cloudwatch_logs_tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.create (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_function (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_layer (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.function_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.lambda_at_edge (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.use_existing_cloudwatch_log_group (expand)"
		"[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.additional_inline (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_json (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_json (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_policy_json (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_json (expand)" -> "[root] module.crowdsec.module.authorizer.var.policy_json (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_json (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_json (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_policy_jsons (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)" -> "[root] module.crowdsec.module.authorizer.var.number_of_policy_jsons (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)" -> "[root] module.crowdsec.module.authorizer.var.policy_jsons (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.async (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.async (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.async (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.async (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.dead_letter (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.logs (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.logs (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.logs (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.tracing (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_iam_policy.tracing (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.tracing (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.tracing (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.vpc (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_iam_policy.vpc (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.vpc (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_policy.vpc (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.assume_role (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.local.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.role_description (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.role_force_detach_policies (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.role_path (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.role_permissions_boundary (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.role_tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_inline (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_json (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_json (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_json (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_jsons (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.additional_jsons (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_jsons (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_policies (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.crowdsec.module.authorizer.var.number_of_policies (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.crowdsec.module.authorizer.var.policies (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_one (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_one (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_policy (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_one (expand)" -> "[root] module.crowdsec.module.authorizer.var.policy (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.async (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.async (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.async (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.dead_letter (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.logs (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.logs (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.logs (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.tracing (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.tracing (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.tracing (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.vpc (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_policy.vpc (expand)"
		"[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.vpc (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_unqualified_alias_allowed_triggers (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.event_source_mapping (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.filename (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.s3_bucket (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.s3_object_version (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.was_missing (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.dead_letter_target_arn (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.description (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.environment_variables (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.file_system_arn (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.file_system_local_mount_path (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.handler (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.ignore_source_code_hash (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.image_config_command (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.image_config_entry_point (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.image_config_working_directory (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.image_uri (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.kms_key_arn (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.lambda_role (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.layers (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.memory_size (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.package_type (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.publish (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.reserved_concurrent_executions (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.timeout (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.tracing_mode (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.vpc_security_group_ids (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.vpc_subnet_ids (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.qualifiers (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_async_event_config (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.destination_on_failure (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.destination_on_success (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.maximum_event_age_in_seconds (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.maximum_retry_attempts (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.filename (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.s3_bucket (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.s3_object_version (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.local.was_missing (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.compatible_runtimes (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_layer (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.description (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.ignore_source_code_hash (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.layer_name (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)" -> "[root] module.crowdsec.module.authorizer.var.license_info (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.current_version_triggers (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.current_version_triggers (expand)" -> "[root] module.crowdsec.module.authorizer.var.allowed_triggers (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.current_version_triggers (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_current_version_allowed_triggers (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.unqualified_alias_triggers (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.unqualified_alias_triggers (expand)" -> "[root] module.crowdsec.module.authorizer.var.allowed_triggers (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_permission.unqualified_alias_triggers (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_unqualified_alias_allowed_triggers (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_provisioned_concurrency_config.current_version (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.aws_lambda_provisioned_concurrency_config.current_version (expand)" -> "[root] module.crowdsec.module.authorizer.var.provisioned_concurrent_executions (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.local.s3_key (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.null_resource.archive (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_acl (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_bucket (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_object_storage_class (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_object_tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_server_side_encryption (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.crowdsec.module.authorizer.var.tags (expand)"
		"[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_arn.log_group_arn (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_arn.log_group_arn (expand)" -> "[root] module.crowdsec.module.authorizer.local.log_group_arn_regional (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.create (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_function (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_layer (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.function_name (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.lambda_at_edge (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.crowdsec.module.authorizer.var.use_existing_cloudwatch_log_group (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.tracing (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.tracing (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_tracing_policy (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.tracing (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.vpc (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.vpc (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_network_policy (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy.vpc (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_policy_statements (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] module.crowdsec.module.authorizer.var.policy_statements (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.assume_role (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.assume_role (expand)" -> "[root] module.crowdsec.module.authorizer.local.trusted_entities_principals (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.assume_role (expand)" -> "[root] module.crowdsec.module.authorizer.local.trusted_entities_services (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.assume_role (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.async (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.async (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_async_event_policy (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.async (expand)" -> "[root] module.crowdsec.module.authorizer.var.destination_on_failure (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.async (expand)" -> "[root] module.crowdsec.module.authorizer.var.destination_on_success (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.async (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_dead_letter_policy (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] module.crowdsec.module.authorizer.var.dead_letter_target_arn (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.logs (expand)" -> "[root] module.crowdsec.module.authorizer.local.log_group_arn (expand)"
		"[root] module.crowdsec.module.authorizer.data.aws_iam_policy_document.logs (expand)" -> "[root] module.crowdsec.module.authorizer.var.attach_cloudwatch_logs_policy (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.local.python (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.artifacts_dir (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.build_in_docker (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.create (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_package (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.docker_build_root (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.docker_file (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.docker_image (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.docker_pip_cache (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.docker_with_ssh_agent (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.hash_extra (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.recreate_missing_package (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.runtime (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] module.crowdsec.module.authorizer.var.source_path (expand)"
		"[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/external\"]"
		"[root] module.crowdsec.module.authorizer.local.archive_filename (expand)" -> "[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)"
		"[root] module.crowdsec.module.authorizer.local.archive_was_missing (expand)" -> "[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)"
		"[root] module.crowdsec.module.authorizer.local.create_role (expand)" -> "[root] module.crowdsec.module.authorizer.var.create (expand)"
		"[root] module.crowdsec.module.authorizer.local.create_role (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_function (expand)"
		"[root] module.crowdsec.module.authorizer.local.create_role (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_layer (expand)"
		"[root] module.crowdsec.module.authorizer.local.create_role (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.local.filename (expand)" -> "[root] module.crowdsec.module.authorizer.local.archive_filename (expand)"
		"[root] module.crowdsec.module.authorizer.local.filename (expand)" -> "[root] module.crowdsec.module.authorizer.var.local_existing_package (expand)"
		"[root] module.crowdsec.module.authorizer.local.filename (expand)" -> "[root] module.crowdsec.module.authorizer.var.store_on_s3 (expand)"
		"[root] module.crowdsec.module.authorizer.local.log_group_arn (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_arn.log_group_arn (expand)"
		"[root] module.crowdsec.module.authorizer.local.log_group_arn_regional (expand)" -> "[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.local.log_group_arn_regional (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.local.log_group_name (expand)" -> "[root] module.crowdsec.module.authorizer.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.local.log_group_name (expand)" -> "[root] module.crowdsec.module.authorizer.data.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.local.python (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.local.qualifiers (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_current_version_async_event_config (expand)"
		"[root] module.crowdsec.module.authorizer.local.qualifiers (expand)" -> "[root] module.crowdsec.module.authorizer.var.create_unqualified_alias_async_event_config (expand)"
		"[root] module.crowdsec.module.authorizer.local.role_name (expand)" -> "[root] module.crowdsec.module.authorizer.local.create_role (expand)"
		"[root] module.crowdsec.module.authorizer.local.role_name (expand)" -> "[root] module.crowdsec.module.authorizer.var.function_name (expand)"
		"[root] module.crowdsec.module.authorizer.local.role_name (expand)" -> "[root] module.crowdsec.module.authorizer.var.role_name (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_bucket (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_bucket (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_bucket (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_existing_package (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_bucket (expand)" -> "[root] module.crowdsec.module.authorizer.var.store_on_s3 (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_key (expand)" -> "[root] module.crowdsec.module.authorizer.local.archive_filename (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_key (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_existing_package (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_key (expand)" -> "[root] module.crowdsec.module.authorizer.var.s3_prefix (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_key (expand)" -> "[root] module.crowdsec.module.authorizer.var.store_on_s3 (expand)"
		"[root] module.crowdsec.module.authorizer.local.s3_object_version (expand)" -> "[root] module.crowdsec.module.authorizer.aws_s3_bucket_object.lambda_package (expand)"
		"[root] module.crowdsec.module.authorizer.local.trusted_entities_principals (expand)" -> "[root] module.crowdsec.module.authorizer.var.trusted_entities (expand)"
		"[root] module.crowdsec.module.authorizer.local.trusted_entities_services (expand)" -> "[root] module.crowdsec.module.authorizer.var.lambda_at_edge (expand)"
		"[root] module.crowdsec.module.authorizer.local.trusted_entities_services (expand)" -> "[root] module.crowdsec.module.authorizer.var.trusted_entities (expand)"
		"[root] module.crowdsec.module.authorizer.local.was_missing (expand)" -> "[root] module.crowdsec.module.authorizer.local.archive_was_missing (expand)"
		"[root] module.crowdsec.module.authorizer.local.was_missing (expand)" -> "[root] module.crowdsec.module.authorizer.var.local_existing_package (expand)"
		"[root] module.crowdsec.module.authorizer.local_file.archive_plan (expand)" -> "[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)"
		"[root] module.crowdsec.module.authorizer.local_file.archive_plan (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/local\"]"
		"[root] module.crowdsec.module.authorizer.null_resource.archive (expand)" -> "[root] module.crowdsec.module.authorizer.local_file.archive_plan (expand)"
		"[root] module.crowdsec.module.authorizer.null_resource.archive (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/null\"]"
		"[root] module.crowdsec.module.authorizer.output.lambda_cloudwatch_log_group_arn (expand)" -> "[root] module.crowdsec.module.authorizer.local.log_group_arn (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_cloudwatch_log_group_name (expand)" -> "[root] module.crowdsec.module.authorizer.local.log_group_name (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_function_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_state (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_state_transition_reason (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_event_source_mapping_uuid (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_invoke_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_kms_key_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_last_modified (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_name (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_qualified_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_source_code_hash (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_source_code_size (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_function_version (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_layer_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_layer_created_date (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_layer_layer_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_layer_source_code_size (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_layer_version (expand)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_role_arn (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_role_name (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.output.lambda_role_unique_id (expand)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role.lambda (expand)"
		"[root] module.crowdsec.module.authorizer.output.local_filename (expand)" -> "[root] module.crowdsec.module.authorizer.local.filename (expand)"
		"[root] module.crowdsec.module.authorizer.output.s3_object (expand)" -> "[root] module.crowdsec.module.authorizer.local.s3_bucket (expand)"
		"[root] module.crowdsec.module.authorizer.output.s3_object (expand)" -> "[root] module.crowdsec.module.authorizer.local.s3_object_version (expand)"
		"[root] module.crowdsec.module.authorizer.var.allowed_triggers (expand)" -> "[root] module.crowdsec.local.allowed_triggers (expand)"
		"[root] module.crowdsec.module.authorizer.var.allowed_triggers (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.artifacts_dir (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_async_event_policy (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_cloudwatch_logs_policy (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_dead_letter_policy (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_network_policy (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_policies (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_policy (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_policy_json (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_policy_jsons (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_policy_statements (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.attach_tracing_policy (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.build_in_docker (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.cloudwatch_logs_kms_key_id (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.cloudwatch_logs_retention_in_days (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.cloudwatch_logs_tags (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.compatible_runtimes (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_async_event_config (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_current_version_allowed_triggers (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_current_version_async_event_config (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_function (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_layer (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_package (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_role (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_unqualified_alias_allowed_triggers (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.create_unqualified_alias_async_event_config (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.dead_letter_target_arn (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.description (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.destination_on_failure (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.destination_on_success (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.docker_build_root (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.docker_file (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.docker_image (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.docker_pip_cache (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.docker_with_ssh_agent (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.environment_variables (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.environment_variables (expand)" -> "[root] module.crowdsec.random_password.bouncer_key (expand)"
		"[root] module.crowdsec.module.authorizer.var.environment_variables (expand)" -> "[root] module.crowdsec.var.captcha_secret (expand)"
		"[root] module.crowdsec.module.authorizer.var.event_source_mapping (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.file_system_arn (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.file_system_local_mount_path (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.function_name (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.handler (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.hash_extra (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.ignore_source_code_hash (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.image_config_command (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.image_config_entry_point (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.image_config_working_directory (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.image_uri (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.kms_key_arn (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.lambda_at_edge (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.lambda_role (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.layer_name (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.layers (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.license_info (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.local_existing_package (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.maximum_event_age_in_seconds (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.maximum_retry_attempts (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.memory_size (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.number_of_policies (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.number_of_policy_jsons (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.package_type (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.policies (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.policy (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.policy_json (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.policy_jsons (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.policy_statements (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.provisioned_concurrent_executions (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.publish (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.recreate_missing_package (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.reserved_concurrent_executions (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.role_description (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.role_force_detach_policies (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.role_name (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.role_path (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.role_permissions_boundary (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.role_tags (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.runtime (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.s3_acl (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.s3_bucket (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.s3_existing_package (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.s3_object_storage_class (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.s3_object_tags (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.s3_prefix (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.s3_server_side_encryption (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.source_path (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.store_on_s3 (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.tags (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.timeout (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.tracing_mode (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.trusted_entities (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.use_existing_cloudwatch_log_group (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.vpc_security_group_ids (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.vpc_security_group_ids (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.output.security_group_id (expand)"
		"[root] module.crowdsec.module.authorizer.var.vpc_subnet_ids (expand)" -> "[root] module.crowdsec.module.authorizer (expand)"
		"[root] module.crowdsec.module.authorizer.var.vpc_subnet_ids (expand)" -> "[root] module.crowdsec.module.vpc.output.private_subnets (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.output.security_group_description (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.output.security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.output.security_group_name (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.output.security_group_owner_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.output.security_group_vpc_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (close)" -> "[root] module.crowdsec.module.crowdsec-sg.var.auto_groups (expand)"
		"[root] module.crowdsec.module.crowdsec-sg (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.create (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.create_sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.description (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.name (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.revoke_rules_on_delete (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.tags (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.use_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.vpc_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.create (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.create_sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.description (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.name (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.revoke_rules_on_delete (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.tags (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.use_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.vpc_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.egress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_self (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_source_security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.local.this_sg_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.var.security_group_id (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_description (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_description (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_name (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_name (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_owner_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_owner_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_vpc_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.output.security_group_vpc_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group.this_name_prefix (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.auto_groups (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.computed_ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.create (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.create_sg (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.description (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_prefix_list_ids (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_prefix_list_ids (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.name (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_egress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_self (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.number_of_computed_ingress_with_source_security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.revoke_rules_on_delete (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.rules (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.security_group_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.tags (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.use_name_prefix (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.vpc_id (expand)" -> "[root] module.crowdsec.module.crowdsec-sg (expand)"
		"[root] module.crowdsec.module.crowdsec-sg.var.vpc_id (expand)" -> "[root] module.crowdsec.module.vpc.output.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_inbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_outbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_inbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_outbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_inbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_outbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_inbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_outbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_inbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_outbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_inbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_outbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_inbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_outbound (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.outpost (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options_association.this (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.azs (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.cgw_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.cgw_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_internet_gateway_route_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_ipv6_egress_route_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_nat_gateway_route_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_network_acl_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_route_table_association_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_route_table_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_subnet_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_subnet_group (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_subnet_group_name (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_subnets (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_subnets_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.database_subnets_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_route_table_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_security_group_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_cidr_block (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_default_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_default_route_table_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_default_security_group_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_enable_dns_hostnames (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_enable_dns_support (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_instance_tenancy (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.default_vpc_main_route_table_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.dhcp_options_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.egress_only_internet_gateway_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_network_acl_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_route_table_association_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_route_table_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_subnet_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_subnet_group (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_subnet_group_name (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_subnets (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_subnets_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.elasticache_subnets_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.igw_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.igw_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_network_acl_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_route_table_association_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_route_table_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_subnet_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_subnets (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_subnets_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.intra_subnets_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.name (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.nat_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.nat_public_ips (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.natgw_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.outpost_network_acl_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.outpost_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.outpost_subnet_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.outpost_subnets (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.outpost_subnets_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.outpost_subnets_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_ipv6_egress_route_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_nat_gateway_route_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_network_acl_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_route_table_association_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_route_table_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_subnet_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_subnets (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_subnets_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.private_subnets_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_internet_gateway_ipv6_route_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_internet_gateway_route_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_network_acl_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_route_table_association_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_route_table_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_subnet_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_subnets (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_subnets_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.public_subnets_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_network_acl_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_network_acl_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_public_route_table_association_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_route_table_association_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_route_table_ids (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_subnet_arns (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_subnet_group (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_subnets (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_subnets_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.redshift_subnets_ipv6_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.this_customer_gateway (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vgw_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vgw_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_cidr_block (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_enable_dns_hostnames (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_enable_dns_support (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_flow_log_cloudwatch_iam_role_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_flow_log_destination_arn (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_flow_log_destination_type (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_flow_log_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_instance_tenancy (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_ipv6_association_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_ipv6_cidr_block (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_main_route_table_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_owner_id (expand)"
		"[root] module.crowdsec.module.vpc (close)" -> "[root] module.crowdsec.module.vpc.output.vpc_secondary_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)" -> "[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_log_group (expand)"
		"[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_log_group_kms_key_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_log_group_name_prefix (expand)"
		"[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_log_group_retention_in_days (expand)"
		"[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)" -> "[root] module.crowdsec.module.vpc.var.vpc_flow_log_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.customer_gateway_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.customer_gateways (expand)"
		"[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.name (expand)"
		"[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)" -> "[root] module.crowdsec.module.vpc.var.create_database_subnet_group (expand)"
		"[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnet_group_name (expand)"
		"[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnet_group_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_network_acl_egress (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_network_acl_ingress (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_network_acl_name (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_network_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)" -> "[root] module.crowdsec.module.vpc.var.manage_default_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)" -> "[root] module.crowdsec.module.vpc.var.default_route_table_propagating_vgws (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)" -> "[root] module.crowdsec.module.vpc.var.default_route_table_routes (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)" -> "[root] module.crowdsec.module.vpc.var.default_route_table_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)" -> "[root] module.crowdsec.module.vpc.var.manage_default_route_table (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_security_group_egress (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_security_group_ingress (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_security_group_name (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_security_group_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)" -> "[root] module.crowdsec.module.vpc.var.manage_default_security_group (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_vpc_enable_classiclink (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_vpc_enable_dns_hostnames (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_vpc_enable_dns_support (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_vpc_name (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.default_vpc_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.manage_default_vpc (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.local.max_subnet_length (expand)"
		"[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.create_egress_only_igw (expand)"
		"[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.igw_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" -> "[root] module.crowdsec.module.vpc.local.nat_gateway_count (expand)"
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" -> "[root] module.crowdsec.module.vpc.var.create_vpc (expand)"
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_nat_gateway (expand)"
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" -> "[root] module.crowdsec.module.vpc.var.name (expand)"
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" -> "[root] module.crowdsec.module.vpc.var.nat_eip_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" -> "[root] module.crowdsec.module.vpc.var.reuse_nat_ips (expand)"
		"[root] module.crowdsec.module.vpc.aws_eip.nat (expand)" -> "[root] module.crowdsec.module.vpc.var.tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.create_elasticache_subnet_group (expand)"
		"[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnet_group_name (expand)"
		"[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnet_group_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.local.flow_log_destination_arn (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.local.flow_log_iam_role_arn (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_file_format (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_hive_compatible_partitions (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_log_format (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_max_aggregation_interval (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_per_hour_partition (expand)"
		"[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_traffic_type (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.var.tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.var.vpc_flow_log_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.var.tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.var.vpc_flow_log_permissions_boundary (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.var.vpc_flow_log_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch (expand)"
		"[root] module.crowdsec.module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch (expand)"
		"[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.create_igw (expand)"
		"[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.igw_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.local.nat_gateway_ips (expand)"
		"[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.nat_gateway_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_dedicated_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_dedicated_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_dedicated_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_dedicated_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_dedicated_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_dedicated_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_acl_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_dedicated_network_acl (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_inbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_inbound (expand)" -> "[root] module.crowdsec.module.vpc.var.database_inbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_outbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_outbound (expand)" -> "[root] module.crowdsec.module.vpc.var.database_outbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_inbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_inbound (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_inbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_outbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_outbound (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_outbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_inbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_inbound (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_inbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_outbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_outbound (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_outbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_inbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_inbound (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_inbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_outbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_outbound (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_outbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_inbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_inbound (expand)" -> "[root] module.crowdsec.module.vpc.var.private_inbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_outbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_outbound (expand)" -> "[root] module.crowdsec.module.vpc.var.private_outbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_inbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_inbound (expand)" -> "[root] module.crowdsec.module.vpc.var.public_inbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_outbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_outbound (expand)" -> "[root] module.crowdsec.module.vpc.var.public_outbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_inbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_inbound (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_inbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_outbound (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_outbound (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_outbound_acl_rules (expand)"
		"[root] module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.create_redshift_subnet_group (expand)"
		"[root] module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnet_group_name (expand)"
		"[root] module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnet_group_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_internet_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_internet_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_internet_gateway (expand)" -> "[root] module.crowdsec.module.vpc.var.create_database_nat_gateway_route (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_ipv6_egress (expand)" -> "[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_ipv6_egress (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_nat_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_nat_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.database_nat_gateway (expand)" -> "[root] module.crowdsec.module.vpc.var.create_database_nat_gateway_route (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.private_ipv6_egress (expand)" -> "[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.private_ipv6_egress (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.private_nat_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.private_nat_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway_ipv6 (expand)" -> "[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway_ipv6 (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.var.create_database_internet_gateway_route (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.var.create_database_subnet_route_table (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_route_table_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.database (expand)" -> "[root] module.crowdsec.module.vpc.var.single_nat_gateway (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.create_elasticache_subnet_route_table (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_route_table_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_route_table_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.private (expand)" -> "[root] module.crowdsec.module.vpc.local.nat_gateway_count (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.private (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_route_table_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.public (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_route_table_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.create_redshift_subnet_route_table (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_route_table_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.database (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.database (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.database (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.database (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.intra (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.intra (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.outpost (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.outpost (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.private (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.private (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.public (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.public (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_public_redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_public_redshift (expand)"
		"[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)" -> "[root] module.crowdsec.module.vpc.var.single_nat_gateway (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnet_assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnet_ipv6_prefixes (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnet_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.database (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnet_assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnet_ipv6_prefixes (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnet_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_subnet_assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_subnet_ipv6_prefixes (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_subnet_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.intra_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_arn (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_az (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_subnet_assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_subnet_ipv6_prefixes (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_subnet_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)" -> "[root] module.crowdsec.module.vpc.var.outpost_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_subnet_assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_subnet_ipv6_prefixes (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_subnet_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.private (expand)" -> "[root] module.crowdsec.module.vpc.var.private_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.map_public_ip_on_launch (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.one_nat_gateway_per_az (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnet_assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnet_ipv6_prefixes (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnet_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.public (expand)" -> "[root] module.crowdsec.module.vpc.var.public_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnet_assign_ipv6_address_on_creation (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnet_ipv6_prefixes (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnet_suffix (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnet_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnets (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.cidr (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.create_vpc (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_classiclink (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_classiclink_dns_support (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_dns_hostnames (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_dns_support (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_ipv6 (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.instance_tenancy (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.name (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] module.crowdsec.module.vpc.var.vpc_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc.this (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.create_vpc (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.dhcp_options_domain_name (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.dhcp_options_domain_name_servers (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.dhcp_options_netbios_name_servers (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.dhcp_options_netbios_node_type (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.dhcp_options_ntp_servers (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.dhcp_options_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_dhcp_options (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.name (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] module.crowdsec.module.vpc.var.tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options_association.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options_association.this (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_ipv4_cidr_block_association.this (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpc_ipv4_cidr_block_association.this (expand)" -> "[root] module.crowdsec.module.vpc.var.secondary_cidr_blocks (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.amazon_side_asn (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_vpn_gateway (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.vpn_gateway_az (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)" -> "[root] module.crowdsec.module.vpc.var.vpn_gateway_tags (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this (expand)" -> "[root] module.crowdsec.module.vpc.local.vpc_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this (expand)" -> "[root] module.crowdsec.module.vpc.var.vpn_gateway_id (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra (expand)" -> "[root] module.crowdsec.module.vpc.var.propagate_intra_route_tables_vgw (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private (expand)" -> "[root] module.crowdsec.module.vpc.var.propagate_private_route_tables_vgw (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.public (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this (expand)"
		"[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public (expand)" -> "[root] module.crowdsec.module.vpc.var.propagate_public_route_tables_vgw (expand)"
		"[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role (expand)" -> "[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_iam_role (expand)"
		"[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch (expand)" -> "[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_iam_role (expand)"
		"[root] module.crowdsec.module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_iam_role (expand)" -> "[root] module.crowdsec.module.vpc.local.enable_flow_log (expand)"
		"[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_iam_role (expand)" -> "[root] module.crowdsec.module.vpc.var.create_flow_log_cloudwatch_iam_role (expand)"
		"[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_iam_role (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_destination_type (expand)"
		"[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_log_group (expand)" -> "[root] module.crowdsec.module.vpc.local.enable_flow_log (expand)"
		"[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_log_group (expand)" -> "[root] module.crowdsec.module.vpc.var.create_flow_log_cloudwatch_log_group (expand)"
		"[root] module.crowdsec.module.vpc.local.create_flow_log_cloudwatch_log_group (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_destination_type (expand)"
		"[root] module.crowdsec.module.vpc.local.enable_flow_log (expand)" -> "[root] module.crowdsec.module.vpc.var.create_vpc (expand)"
		"[root] module.crowdsec.module.vpc.local.enable_flow_log (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_flow_log (expand)"
		"[root] module.crowdsec.module.vpc.local.flow_log_destination_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_cloudwatch_log_group.flow_log (expand)"
		"[root] module.crowdsec.module.vpc.local.flow_log_destination_arn (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_destination_arn (expand)"
		"[root] module.crowdsec.module.vpc.local.flow_log_iam_role_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_iam_role.vpc_flow_log_cloudwatch (expand)"
		"[root] module.crowdsec.module.vpc.local.flow_log_iam_role_arn (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_iam_role_arn (expand)"
		"[root] module.crowdsec.module.vpc.local.max_subnet_length (expand)" -> "[root] module.crowdsec.module.vpc.var.database_subnets (expand)"
		"[root] module.crowdsec.module.vpc.local.max_subnet_length (expand)" -> "[root] module.crowdsec.module.vpc.var.elasticache_subnets (expand)"
		"[root] module.crowdsec.module.vpc.local.max_subnet_length (expand)" -> "[root] module.crowdsec.module.vpc.var.private_subnets (expand)"
		"[root] module.crowdsec.module.vpc.local.max_subnet_length (expand)" -> "[root] module.crowdsec.module.vpc.var.redshift_subnets (expand)"
		"[root] module.crowdsec.module.vpc.local.nat_gateway_count (expand)" -> "[root] module.crowdsec.module.vpc.local.max_subnet_length (expand)"
		"[root] module.crowdsec.module.vpc.local.nat_gateway_count (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.local.nat_gateway_count (expand)" -> "[root] module.crowdsec.module.vpc.var.one_nat_gateway_per_az (expand)"
		"[root] module.crowdsec.module.vpc.local.nat_gateway_count (expand)" -> "[root] module.crowdsec.module.vpc.var.single_nat_gateway (expand)"
		"[root] module.crowdsec.module.vpc.local.nat_gateway_ips (expand)" -> "[root] module.crowdsec.module.vpc.aws_eip.nat (expand)"
		"[root] module.crowdsec.module.vpc.local.nat_gateway_ips (expand)" -> "[root] module.crowdsec.module.vpc.var.external_nat_ip_ids (expand)"
		"[root] module.crowdsec.module.vpc.local.vpc_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc_ipv4_cidr_block_association.this (expand)"
		"[root] module.crowdsec.module.vpc.output.azs (expand)" -> "[root] module.crowdsec.module.vpc.var.azs (expand)"
		"[root] module.crowdsec.module.vpc.output.cgw_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.cgw_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.database_internet_gateway_route_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_route.database_internet_gateway (expand)"
		"[root] module.crowdsec.module.vpc.output.database_ipv6_egress_route_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_route.database_ipv6_egress (expand)"
		"[root] module.crowdsec.module.vpc.output.database_nat_gateway_route_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route.database_nat_gateway (expand)"
		"[root] module.crowdsec.module.vpc.output.database_network_acl_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_route_table_association_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.output.database_subnet_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_subnet_group (expand)" -> "[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_subnet_group_name (expand)" -> "[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_subnets (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_subnets_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.database (expand)"
		"[root] module.crowdsec.module.vpc.output.database_subnets_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.database (expand)"
		"[root] module.crowdsec.module.vpc.output.default_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_route_table_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_security_group_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_cidr_block (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_default_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_default_route_table_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_default_security_group_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_enable_dns_hostnames (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_enable_dns_support (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_instance_tenancy (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.default_vpc_main_route_table_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.dhcp_options_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options.this (expand)"
		"[root] module.crowdsec.module.vpc.output.egress_only_internet_gateway_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_egress_only_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_network_acl_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_route_table_association_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_subnet_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_subnet_group (expand)" -> "[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_subnet_group_name (expand)" -> "[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_subnets (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_subnets_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.elasticache_subnets_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.elasticache (expand)"
		"[root] module.crowdsec.module.vpc.output.igw_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.igw_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_internet_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_network_acl_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_route_table_association_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_subnet_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_subnets (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_subnets_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.intra_subnets_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.intra (expand)"
		"[root] module.crowdsec.module.vpc.output.name (expand)" -> "[root] module.crowdsec.module.vpc.var.name (expand)"
		"[root] module.crowdsec.module.vpc.output.nat_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_eip.nat (expand)"
		"[root] module.crowdsec.module.vpc.output.nat_public_ips (expand)" -> "[root] module.crowdsec.module.vpc.aws_eip.nat (expand)"
		"[root] module.crowdsec.module.vpc.output.nat_public_ips (expand)" -> "[root] module.crowdsec.module.vpc.var.external_nat_ips (expand)"
		"[root] module.crowdsec.module.vpc.output.natgw_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_nat_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.outpost_network_acl_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)"
		"[root] module.crowdsec.module.vpc.output.outpost_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.outpost (expand)"
		"[root] module.crowdsec.module.vpc.output.outpost_subnet_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)"
		"[root] module.crowdsec.module.vpc.output.outpost_subnets (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)"
		"[root] module.crowdsec.module.vpc.output.outpost_subnets_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)"
		"[root] module.crowdsec.module.vpc.output.outpost_subnets_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.outpost (expand)"
		"[root] module.crowdsec.module.vpc.output.private_ipv6_egress_route_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route.private_ipv6_egress (expand)"
		"[root] module.crowdsec.module.vpc.output.private_nat_gateway_route_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route.private_nat_gateway (expand)"
		"[root] module.crowdsec.module.vpc.output.private_network_acl_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)"
		"[root] module.crowdsec.module.vpc.output.private_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.private (expand)"
		"[root] module.crowdsec.module.vpc.output.private_route_table_association_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.private (expand)"
		"[root] module.crowdsec.module.vpc.output.private_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.output.private_subnet_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.private (expand)"
		"[root] module.crowdsec.module.vpc.output.private_subnets (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.private (expand)"
		"[root] module.crowdsec.module.vpc.output.private_subnets_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.private (expand)"
		"[root] module.crowdsec.module.vpc.output.private_subnets_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.private (expand)"
		"[root] module.crowdsec.module.vpc.output.public_internet_gateway_ipv6_route_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway_ipv6 (expand)"
		"[root] module.crowdsec.module.vpc.output.public_internet_gateway_route_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway (expand)"
		"[root] module.crowdsec.module.vpc.output.public_network_acl_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)"
		"[root] module.crowdsec.module.vpc.output.public_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.public (expand)"
		"[root] module.crowdsec.module.vpc.output.public_route_table_association_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.public (expand)"
		"[root] module.crowdsec.module.vpc.output.public_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.public (expand)"
		"[root] module.crowdsec.module.vpc.output.public_subnet_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.public (expand)"
		"[root] module.crowdsec.module.vpc.output.public_subnets (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.public (expand)"
		"[root] module.crowdsec.module.vpc.output.public_subnets_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.public (expand)"
		"[root] module.crowdsec.module.vpc.output.public_subnets_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.public (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_network_acl_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_network_acl_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_network_acl.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_public_route_table_association_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_route_table_association_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.private (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.public (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.aws_route_table.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_route_table_ids (expand)" -> "[root] module.crowdsec.module.vpc.var.enable_public_redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_subnet_arns (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_subnet_group (expand)" -> "[root] module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_subnets (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_subnets_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.redshift_subnets_ipv6_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_subnet.redshift (expand)"
		"[root] module.crowdsec.module.vpc.output.this_customer_gateway (expand)" -> "[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vgw_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vgw_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vgw_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_attachment.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_arn (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_cidr_block (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_enable_dns_hostnames (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_enable_dns_support (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_flow_log_cloudwatch_iam_role_arn (expand)" -> "[root] module.crowdsec.module.vpc.local.flow_log_iam_role_arn (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_flow_log_destination_arn (expand)" -> "[root] module.crowdsec.module.vpc.local.flow_log_destination_arn (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_flow_log_destination_type (expand)" -> "[root] module.crowdsec.module.vpc.var.flow_log_destination_type (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_flow_log_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_instance_tenancy (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_ipv6_association_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_ipv6_cidr_block (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_main_route_table_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_owner_id (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc.this (expand)"
		"[root] module.crowdsec.module.vpc.output.vpc_secondary_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc.aws_vpc_ipv4_cidr_block_association.this (expand)"
		"[root] module.crowdsec.module.vpc.var.amazon_side_asn (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.azs (expand)" -> "[root] module.crowdsec.data.aws_availability_zones.az (expand)"
		"[root] module.crowdsec.module.vpc.var.azs (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.cidr (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_database_internet_gateway_route (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_database_nat_gateway_route (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_database_subnet_group (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_database_subnet_route_table (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_egress_only_igw (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_elasticache_subnet_group (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_elasticache_subnet_route_table (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_flow_log_cloudwatch_iam_role (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_flow_log_cloudwatch_log_group (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_igw (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_redshift_subnet_group (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_redshift_subnet_route_table (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.create_vpc (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.customer_gateway_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.customer_gateways (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_dedicated_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_inbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_outbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_route_table_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_subnet_assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_subnet_group_name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_subnet_group_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_subnet_ipv6_prefixes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_subnet_suffix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_subnet_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.database_subnets (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_network_acl_egress (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_network_acl_ingress (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_network_acl_name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_network_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_route_table_propagating_vgws (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_route_table_routes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_route_table_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_security_group_egress (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_security_group_ingress (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_security_group_name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_security_group_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_vpc_enable_classiclink (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_vpc_enable_dns_hostnames (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_vpc_enable_dns_support (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_vpc_name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.default_vpc_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.dhcp_options_domain_name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.dhcp_options_domain_name_servers (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.dhcp_options_netbios_name_servers (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.dhcp_options_netbios_node_type (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.dhcp_options_ntp_servers (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.dhcp_options_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_dedicated_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_inbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_outbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_route_table_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_subnet_assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_subnet_group_name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_subnet_group_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_subnet_ipv6_prefixes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_subnet_suffix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_subnet_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.elasticache_subnets (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_classiclink (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_classiclink_dns_support (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_dhcp_options (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_dns_hostnames (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_dns_support (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_flow_log (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_ipv6 (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_nat_gateway (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_public_redshift (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.enable_vpn_gateway (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.external_nat_ip_ids (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.external_nat_ips (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_iam_role_arn (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_log_group_kms_key_id (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_log_group_name_prefix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_cloudwatch_log_group_retention_in_days (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_destination_arn (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_destination_type (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_file_format (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_hive_compatible_partitions (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_log_format (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_max_aggregation_interval (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_per_hour_partition (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.flow_log_traffic_type (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.igw_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.instance_tenancy (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_dedicated_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_inbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_outbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_route_table_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_subnet_assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_subnet_ipv6_prefixes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_subnet_suffix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_subnet_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.intra_subnets (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.manage_default_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.manage_default_route_table (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.manage_default_security_group (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.manage_default_vpc (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.map_public_ip_on_launch (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.nat_eip_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.nat_gateway_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.one_nat_gateway_per_az (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_arn (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_az (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_dedicated_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_inbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_outbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_subnet_assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_subnet_ipv6_prefixes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_subnet_suffix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_subnet_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.outpost_subnets (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_dedicated_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_inbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_outbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_route_table_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_subnet_assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_subnet_ipv6_prefixes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_subnet_suffix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_subnet_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.private_subnets (expand)" -> "[root] module.crowdsec.data.aws_availability_zones.az (expand)"
		"[root] module.crowdsec.module.vpc.var.private_subnets (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.propagate_intra_route_tables_vgw (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.propagate_private_route_tables_vgw (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.propagate_public_route_tables_vgw (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_dedicated_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_inbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_outbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_route_table_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_subnet_assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_subnet_ipv6_prefixes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_subnet_suffix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_subnet_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.public_subnets (expand)" -> "[root] module.crowdsec.data.aws_availability_zones.az (expand)"
		"[root] module.crowdsec.module.vpc.var.public_subnets (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_acl_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_dedicated_network_acl (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_inbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_outbound_acl_rules (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_route_table_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_subnet_assign_ipv6_address_on_creation (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_subnet_group_name (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_subnet_group_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_subnet_ipv6_prefixes (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_subnet_suffix (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_subnet_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.redshift_subnets (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.reuse_nat_ips (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.secondary_cidr_blocks (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.single_nat_gateway (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.vpc_flow_log_permissions_boundary (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.vpc_flow_log_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.vpc_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.vpn_gateway_az (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.vpn_gateway_id (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.module.vpc.var.vpn_gateway_tags (expand)" -> "[root] module.crowdsec.module.vpc (expand)"
		"[root] module.crowdsec.output.aws_apigatewayv2_authorizer_id (expand)" -> "[root] module.crowdsec.aws_apigatewayv2_authorizer.gateway_authorizer (expand)"
		"[root] module.crowdsec.random_password.bouncer_key (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.random_password.bouncer_key (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/random\"]"
		"[root] module.crowdsec.random_password.csdbpassword (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.random_password.csdbpassword (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/random\"]"
		"[root] module.crowdsec.var.acquis (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.aws_apigateway_api_execution_arn (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.aws_apigateway_id (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.aws_apigateway_v2_api_execution_arn (expand)" -> "[root] aws_apigatewayv2_api.example (expand)"
		"[root] module.crowdsec.var.aws_apigateway_v2_api_execution_arn (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.aws_apigateway_v2_id (expand)" -> "[root] aws_apigatewayv2_api.example (expand)"
		"[root] module.crowdsec.var.aws_apigateway_v2_id (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.captcha_secret (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.cloudwatch_group_name (expand)" -> "[root] module.cloudwatch_log-group.output.cloudwatch_log_group_name (expand)"
		"[root] module.crowdsec.var.cloudwatch_group_name (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.collections (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.config (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.crowdsec_cpu (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.crowdsec_memory (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.parsers (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.profiles (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.crowdsec.var.scenarios (expand)" -> "[root] module.crowdsec (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_inline (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_json (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_jsons (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_many (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_one (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.async (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.dead_letter (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.logs (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.tracing (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.vpc (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_lambda_permission.current_version_triggers (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_lambda_permission.unqualified_alias_triggers (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.aws_lambda_provisioned_concurrency_config.current_version (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_cloudwatch_log_group_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_cloudwatch_log_group_name (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_event_source_mapping_function_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_event_source_mapping_state (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_event_source_mapping_state_transition_reason (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_event_source_mapping_uuid (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_invoke_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_kms_key_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_last_modified (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_name (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_qualified_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_source_code_hash (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_source_code_size (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_function_version (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_layer_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_layer_created_date (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_layer_layer_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_layer_source_code_size (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_layer_version (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_role_arn (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_role_name (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.lambda_role_unique_id (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.local_filename (expand)"
		"[root] module.lambda (close)" -> "[root] module.lambda.output.s3_object (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.cloudwatch_logs_kms_key_id (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.cloudwatch_logs_retention_in_days (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.cloudwatch_logs_tags (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.create (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.create_function (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.create_layer (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.function_name (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.lambda_at_edge (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.use_existing_cloudwatch_log_group (expand)"
		"[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.aws_iam_policy.additional_inline (expand)" -> "[root] module.lambda.data.aws_iam_policy_document.additional_inline (expand)"
		"[root] module.lambda.aws_iam_policy.additional_inline (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.additional_inline (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_policy.additional_json (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.additional_json (expand)" -> "[root] module.lambda.var.attach_policy_json (expand)"
		"[root] module.lambda.aws_iam_policy.additional_json (expand)" -> "[root] module.lambda.var.policy_json (expand)"
		"[root] module.lambda.aws_iam_policy.additional_json (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_policy.additional_json (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.aws_iam_policy.additional_jsons (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.additional_jsons (expand)" -> "[root] module.lambda.var.attach_policy_jsons (expand)"
		"[root] module.lambda.aws_iam_policy.additional_jsons (expand)" -> "[root] module.lambda.var.number_of_policy_jsons (expand)"
		"[root] module.lambda.aws_iam_policy.additional_jsons (expand)" -> "[root] module.lambda.var.policy_jsons (expand)"
		"[root] module.lambda.aws_iam_policy.additional_jsons (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_policy.additional_jsons (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.aws_iam_policy.async (expand)" -> "[root] module.lambda.data.aws_iam_policy_document.async (expand)"
		"[root] module.lambda.aws_iam_policy.async (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.async (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_policy.dead_letter (expand)" -> "[root] module.lambda.data.aws_iam_policy_document.dead_letter (expand)"
		"[root] module.lambda.aws_iam_policy.dead_letter (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.dead_letter (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_policy.logs (expand)" -> "[root] module.lambda.data.aws_iam_policy_document.logs (expand)"
		"[root] module.lambda.aws_iam_policy.logs (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.tracing (expand)" -> "[root] module.lambda.data.aws_iam_policy.tracing (expand)"
		"[root] module.lambda.aws_iam_policy.tracing (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.tracing (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_policy.vpc (expand)" -> "[root] module.lambda.data.aws_iam_policy.vpc (expand)"
		"[root] module.lambda.aws_iam_policy.vpc (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_policy.vpc (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.data.aws_iam_policy_document.assume_role (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.local.role_name (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.var.role_description (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.var.role_force_detach_policies (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.var.role_path (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.var.role_permissions_boundary (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.var.role_tags (expand)"
		"[root] module.lambda.aws_iam_role.lambda (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_inline (expand)" -> "[root] module.lambda.aws_iam_policy.additional_inline (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_inline (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_json (expand)" -> "[root] module.lambda.aws_iam_policy.additional_json (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_json (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_jsons (expand)" -> "[root] module.lambda.aws_iam_policy.additional_jsons (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_jsons (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.lambda.var.attach_policies (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.lambda.var.number_of_policies (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_many (expand)" -> "[root] module.lambda.var.policies (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_one (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_one (expand)" -> "[root] module.lambda.var.attach_policy (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.additional_one (expand)" -> "[root] module.lambda.var.policy (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.async (expand)" -> "[root] module.lambda.aws_iam_policy.async (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.async (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.dead_letter (expand)" -> "[root] module.lambda.aws_iam_policy.dead_letter (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.dead_letter (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.logs (expand)" -> "[root] module.lambda.aws_iam_policy.logs (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.logs (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.tracing (expand)" -> "[root] module.lambda.aws_iam_policy.tracing (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.tracing (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.vpc (expand)" -> "[root] module.lambda.aws_iam_policy.vpc (expand)"
		"[root] module.lambda.aws_iam_role_policy_attachment.vpc (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_lambda_event_source_mapping.this (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.aws_lambda_event_source_mapping.this (expand)" -> "[root] module.lambda.var.create_unqualified_alias_allowed_triggers (expand)"
		"[root] module.lambda.aws_lambda_event_source_mapping.this (expand)" -> "[root] module.lambda.var.event_source_mapping (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.local.filename (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.local.s3_bucket (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.local.s3_object_version (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.local.was_missing (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.dead_letter_target_arn (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.description (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.environment_variables (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.file_system_arn (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.file_system_local_mount_path (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.handler (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.ignore_source_code_hash (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.image_config_command (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.image_config_entry_point (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.image_config_working_directory (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.image_uri (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.kms_key_arn (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.lambda_role (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.layers (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.memory_size (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.package_type (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.publish (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.reserved_concurrent_executions (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.timeout (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.tracing_mode (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.vpc_security_group_ids (expand)"
		"[root] module.lambda.aws_lambda_function.this (expand)" -> "[root] module.lambda.var.vpc_subnet_ids (expand)"
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.lambda.local.qualifiers (expand)"
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.lambda.var.create_async_event_config (expand)"
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.lambda.var.destination_on_failure (expand)"
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.lambda.var.destination_on_success (expand)"
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.lambda.var.maximum_event_age_in_seconds (expand)"
		"[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)" -> "[root] module.lambda.var.maximum_retry_attempts (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.local.filename (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.local.s3_bucket (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.local.s3_object_version (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.local.was_missing (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.var.compatible_runtimes (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.var.create_layer (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.var.description (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.var.ignore_source_code_hash (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.var.layer_name (expand)"
		"[root] module.lambda.aws_lambda_layer_version.this (expand)" -> "[root] module.lambda.var.license_info (expand)"
		"[root] module.lambda.aws_lambda_permission.current_version_triggers (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.aws_lambda_permission.current_version_triggers (expand)" -> "[root] module.lambda.var.allowed_triggers (expand)"
		"[root] module.lambda.aws_lambda_permission.current_version_triggers (expand)" -> "[root] module.lambda.var.create_current_version_allowed_triggers (expand)"
		"[root] module.lambda.aws_lambda_permission.unqualified_alias_triggers (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.aws_lambda_permission.unqualified_alias_triggers (expand)" -> "[root] module.lambda.var.allowed_triggers (expand)"
		"[root] module.lambda.aws_lambda_permission.unqualified_alias_triggers (expand)" -> "[root] module.lambda.var.create_unqualified_alias_allowed_triggers (expand)"
		"[root] module.lambda.aws_lambda_provisioned_concurrency_config.current_version (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.aws_lambda_provisioned_concurrency_config.current_version (expand)" -> "[root] module.lambda.var.provisioned_concurrent_executions (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.local.s3_key (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.null_resource.archive (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.var.s3_acl (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.var.s3_bucket (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.var.s3_object_storage_class (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.var.s3_object_tags (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.var.s3_server_side_encryption (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] module.lambda.var.tags (expand)"
		"[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_arn.log_group_arn (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.data.aws_arn.log_group_arn (expand)" -> "[root] module.lambda.local.log_group_arn_regional (expand)"
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.create (expand)"
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.create_function (expand)"
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.create_layer (expand)"
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.function_name (expand)"
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.lambda_at_edge (expand)"
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] module.lambda.var.use_existing_cloudwatch_log_group (expand)"
		"[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_iam_policy.tracing (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.data.aws_iam_policy.tracing (expand)" -> "[root] module.lambda.var.attach_tracing_policy (expand)"
		"[root] module.lambda.data.aws_iam_policy.tracing (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_iam_policy.vpc (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.data.aws_iam_policy.vpc (expand)" -> "[root] module.lambda.var.attach_network_policy (expand)"
		"[root] module.lambda.data.aws_iam_policy.vpc (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] module.lambda.var.attach_policy_statements (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] module.lambda.var.policy_statements (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.additional_inline (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_iam_policy_document.assume_role (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.assume_role (expand)" -> "[root] module.lambda.local.trusted_entities_principals (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.assume_role (expand)" -> "[root] module.lambda.local.trusted_entities_services (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.assume_role (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_iam_policy_document.async (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.async (expand)" -> "[root] module.lambda.var.attach_async_event_policy (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.async (expand)" -> "[root] module.lambda.var.destination_on_failure (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.async (expand)" -> "[root] module.lambda.var.destination_on_success (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.async (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] module.lambda.var.attach_dead_letter_policy (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] module.lambda.var.dead_letter_target_arn (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.dead_letter (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"]"
		"[root] module.lambda.data.aws_iam_policy_document.logs (expand)" -> "[root] module.lambda.local.log_group_arn (expand)"
		"[root] module.lambda.data.aws_iam_policy_document.logs (expand)" -> "[root] module.lambda.var.attach_cloudwatch_logs_policy (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.local.python (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.artifacts_dir (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.build_in_docker (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.create (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.create_package (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.docker_build_root (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.docker_file (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.docker_image (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.docker_pip_cache (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.docker_with_ssh_agent (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.hash_extra (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.recreate_missing_package (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.runtime (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] module.lambda.var.source_path (expand)"
		"[root] module.lambda.data.external.archive_prepare (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/external\"]"
		"[root] module.lambda.local.archive_filename (expand)" -> "[root] module.lambda.data.external.archive_prepare (expand)"
		"[root] module.lambda.local.archive_was_missing (expand)" -> "[root] module.lambda.data.external.archive_prepare (expand)"
		"[root] module.lambda.local.create_role (expand)" -> "[root] module.lambda.var.create (expand)"
		"[root] module.lambda.local.create_role (expand)" -> "[root] module.lambda.var.create_function (expand)"
		"[root] module.lambda.local.create_role (expand)" -> "[root] module.lambda.var.create_layer (expand)"
		"[root] module.lambda.local.create_role (expand)" -> "[root] module.lambda.var.create_role (expand)"
		"[root] module.lambda.local.filename (expand)" -> "[root] module.lambda.local.archive_filename (expand)"
		"[root] module.lambda.local.filename (expand)" -> "[root] module.lambda.var.local_existing_package (expand)"
		"[root] module.lambda.local.filename (expand)" -> "[root] module.lambda.var.store_on_s3 (expand)"
		"[root] module.lambda.local.log_group_arn (expand)" -> "[root] module.lambda.data.aws_arn.log_group_arn (expand)"
		"[root] module.lambda.local.log_group_arn_regional (expand)" -> "[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.lambda.local.log_group_arn_regional (expand)" -> "[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.lambda.local.log_group_name (expand)" -> "[root] module.lambda.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.lambda.local.log_group_name (expand)" -> "[root] module.lambda.data.aws_cloudwatch_log_group.lambda (expand)"
		"[root] module.lambda.local.python (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.local.qualifiers (expand)" -> "[root] module.lambda.var.create_current_version_async_event_config (expand)"
		"[root] module.lambda.local.qualifiers (expand)" -> "[root] module.lambda.var.create_unqualified_alias_async_event_config (expand)"
		"[root] module.lambda.local.role_name (expand)" -> "[root] module.lambda.local.create_role (expand)"
		"[root] module.lambda.local.role_name (expand)" -> "[root] module.lambda.var.function_name (expand)"
		"[root] module.lambda.local.role_name (expand)" -> "[root] module.lambda.var.role_name (expand)"
		"[root] module.lambda.local.s3_bucket (expand)" -> "[root] module.lambda.var.s3_bucket (expand)"
		"[root] module.lambda.local.s3_bucket (expand)" -> "[root] module.lambda.var.s3_existing_package (expand)"
		"[root] module.lambda.local.s3_bucket (expand)" -> "[root] module.lambda.var.store_on_s3 (expand)"
		"[root] module.lambda.local.s3_key (expand)" -> "[root] module.lambda.local.archive_filename (expand)"
		"[root] module.lambda.local.s3_key (expand)" -> "[root] module.lambda.var.s3_existing_package (expand)"
		"[root] module.lambda.local.s3_key (expand)" -> "[root] module.lambda.var.s3_prefix (expand)"
		"[root] module.lambda.local.s3_key (expand)" -> "[root] module.lambda.var.store_on_s3 (expand)"
		"[root] module.lambda.local.s3_object_version (expand)" -> "[root] module.lambda.aws_s3_bucket_object.lambda_package (expand)"
		"[root] module.lambda.local.trusted_entities_principals (expand)" -> "[root] module.lambda.var.trusted_entities (expand)"
		"[root] module.lambda.local.trusted_entities_services (expand)" -> "[root] module.lambda.var.lambda_at_edge (expand)"
		"[root] module.lambda.local.trusted_entities_services (expand)" -> "[root] module.lambda.var.trusted_entities (expand)"
		"[root] module.lambda.local.was_missing (expand)" -> "[root] module.lambda.local.archive_was_missing (expand)"
		"[root] module.lambda.local.was_missing (expand)" -> "[root] module.lambda.var.local_existing_package (expand)"
		"[root] module.lambda.local_file.archive_plan (expand)" -> "[root] module.lambda.data.external.archive_prepare (expand)"
		"[root] module.lambda.local_file.archive_plan (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/local\"]"
		"[root] module.lambda.null_resource.archive (expand)" -> "[root] module.lambda.local_file.archive_plan (expand)"
		"[root] module.lambda.null_resource.archive (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/null\"]"
		"[root] module.lambda.output.lambda_cloudwatch_log_group_arn (expand)" -> "[root] module.lambda.local.log_group_arn (expand)"
		"[root] module.lambda.output.lambda_cloudwatch_log_group_name (expand)" -> "[root] module.lambda.local.log_group_name (expand)"
		"[root] module.lambda.output.lambda_event_source_mapping_function_arn (expand)" -> "[root] module.lambda.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.lambda.output.lambda_event_source_mapping_state (expand)" -> "[root] module.lambda.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.lambda.output.lambda_event_source_mapping_state_transition_reason (expand)" -> "[root] module.lambda.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.lambda.output.lambda_event_source_mapping_uuid (expand)" -> "[root] module.lambda.aws_lambda_event_source_mapping.this (expand)"
		"[root] module.lambda.output.lambda_function_arn (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_invoke_arn (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_kms_key_arn (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_last_modified (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_name (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_qualified_arn (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_source_code_hash (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_source_code_size (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_function_version (expand)" -> "[root] module.lambda.aws_lambda_function.this (expand)"
		"[root] module.lambda.output.lambda_layer_arn (expand)" -> "[root] module.lambda.aws_lambda_layer_version.this (expand)"
		"[root] module.lambda.output.lambda_layer_created_date (expand)" -> "[root] module.lambda.aws_lambda_layer_version.this (expand)"
		"[root] module.lambda.output.lambda_layer_layer_arn (expand)" -> "[root] module.lambda.aws_lambda_layer_version.this (expand)"
		"[root] module.lambda.output.lambda_layer_source_code_size (expand)" -> "[root] module.lambda.aws_lambda_layer_version.this (expand)"
		"[root] module.lambda.output.lambda_layer_version (expand)" -> "[root] module.lambda.aws_lambda_layer_version.this (expand)"
		"[root] module.lambda.output.lambda_role_arn (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.output.lambda_role_name (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.output.lambda_role_unique_id (expand)" -> "[root] module.lambda.aws_iam_role.lambda (expand)"
		"[root] module.lambda.output.local_filename (expand)" -> "[root] module.lambda.local.filename (expand)"
		"[root] module.lambda.output.s3_object (expand)" -> "[root] module.lambda.local.s3_bucket (expand)"
		"[root] module.lambda.output.s3_object (expand)" -> "[root] module.lambda.local.s3_object_version (expand)"
		"[root] module.lambda.var.allowed_triggers (expand)" -> "[root] aws_apigatewayv2_api.example (expand)"
		"[root] module.lambda.var.allowed_triggers (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.artifacts_dir (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_async_event_policy (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_cloudwatch_logs_policy (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_dead_letter_policy (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_network_policy (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_policies (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_policy (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_policy_json (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_policy_jsons (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_policy_statements (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.attach_tracing_policy (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.build_in_docker (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.cloudwatch_logs_kms_key_id (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.cloudwatch_logs_retention_in_days (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.cloudwatch_logs_tags (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.compatible_runtimes (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_async_event_config (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_current_version_allowed_triggers (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_current_version_async_event_config (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_function (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_layer (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_package (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_role (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_unqualified_alias_allowed_triggers (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.create_unqualified_alias_async_event_config (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.dead_letter_target_arn (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.description (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.destination_on_failure (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.destination_on_success (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.docker_build_root (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.docker_file (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.docker_image (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.docker_pip_cache (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.docker_with_ssh_agent (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.environment_variables (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.event_source_mapping (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.file_system_arn (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.file_system_local_mount_path (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.function_name (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.handler (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.hash_extra (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.ignore_source_code_hash (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.image_config_command (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.image_config_entry_point (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.image_config_working_directory (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.image_uri (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.kms_key_arn (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.lambda_at_edge (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.lambda_role (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.layer_name (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.layers (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.license_info (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.local_existing_package (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.maximum_event_age_in_seconds (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.maximum_retry_attempts (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.memory_size (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.number_of_policies (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.number_of_policy_jsons (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.package_type (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.policies (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.policy (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.policy_json (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.policy_jsons (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.policy_statements (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.provisioned_concurrent_executions (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.publish (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.recreate_missing_package (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.reserved_concurrent_executions (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.role_description (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.role_force_detach_policies (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.role_name (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.role_path (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.role_permissions_boundary (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.role_tags (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.runtime (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.s3_acl (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.s3_bucket (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.s3_existing_package (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.s3_object_storage_class (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.s3_object_tags (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.s3_prefix (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.s3_server_side_encryption (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.source_path (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.store_on_s3 (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.tags (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.timeout (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.tracing_mode (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.trusted_entities (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.use_existing_cloudwatch_log_group (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.vpc_security_group_ids (expand)" -> "[root] module.lambda (expand)"
		"[root] module.lambda.var.vpc_subnet_ids (expand)" -> "[root] module.lambda (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_apigatewayv2_route.example (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] aws_apigatewayv2_stage.default (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.aws_api_gateway_authorizer.gateway_authorizer (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.aws_cloudwatch_log_group.crowdsec-lapi (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.aws_ecs_service.crowdsec-service (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.aws_iam_role_policy.lapi-cloudwatch-policy (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.aws_iam_role_policy.lapi-exec-policy (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_inline (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_json (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_jsons (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_many (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.additional_one (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.async (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.dead_letter (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.logs (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.tracing (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_iam_role_policy_attachment.vpc (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_event_source_mapping.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_function_event_invoke_config.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_layer_version.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_permission.current_version_triggers (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_permission.unqualified_alias_triggers (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.authorizer.aws_lambda_provisioned_concurrency_config.current_version (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_rules (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_self (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_egress_with_source_security_group_id (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_rules (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_self (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.computed_ingress_with_source_security_group_id (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_rules (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_ipv6_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_self (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.egress_with_source_security_group_id (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_rules (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_ipv6_cidr_blocks (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_self (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.crowdsec-sg.aws_security_group_rule.ingress_with_source_security_group_id (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_customer_gateway.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_db_subnet_group.database (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_default_network_acl.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_default_route_table.default (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_default_security_group.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_default_vpc.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_elasticache_subnet_group.elasticache (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_flow_log.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_inbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.database_outbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_inbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.elasticache_outbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_inbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.intra_outbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_inbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.outpost_outbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_inbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.private_outbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_inbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.public_outbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_inbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_network_acl_rule.redshift_outbound (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_redshift_subnet_group.redshift (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route.database_internet_gateway (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route.database_ipv6_egress (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route.database_nat_gateway (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route.private_ipv6_egress (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route.private_nat_gateway (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route.public_internet_gateway_ipv6 (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.database (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.elasticache (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.intra (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.outpost (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.private (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.public (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.redshift (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_route_table_association.redshift_public (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_vpc_dhcp_options_association.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.intra (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.private (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.crowdsec.module.vpc.aws_vpn_gateway_route_propagation.public (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_inline (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_json (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_jsons (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_many (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.additional_one (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.async (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.dead_letter (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.logs (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.tracing (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_iam_role_policy_attachment.vpc (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_lambda_event_source_mapping.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_lambda_function_event_invoke_config.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_lambda_layer_version.this (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_lambda_permission.current_version_triggers (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_lambda_permission.unqualified_alias_triggers (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)" -> "[root] module.lambda.aws_lambda_provisioned_concurrency_config.current_version (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/external\"] (close)" -> "[root] module.crowdsec.module.authorizer.data.external.archive_prepare (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/external\"] (close)" -> "[root] module.lambda.data.external.archive_prepare (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/local\"] (close)" -> "[root] module.crowdsec.module.authorizer.local_file.archive_plan (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/local\"] (close)" -> "[root] module.lambda.local_file.archive_plan (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/null\"] (close)" -> "[root] module.crowdsec.module.authorizer.null_resource.archive (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/null\"] (close)" -> "[root] module.lambda.null_resource.archive (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/random\"] (close)" -> "[root] module.crowdsec.random_password.bouncer_key (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/random\"] (close)" -> "[root] module.crowdsec.random_password.csdbpassword (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/template\"] (close)" -> "[root] module.crowdsec.data.template_file.cs_acquis (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/template\"] (close)" -> "[root] module.crowdsec.data.template_file.cs_config (expand)"
		"[root] root" -> "[root] module.cloudwatch_log-group (close)"
		"[root] root" -> "[root] module.crowdsec (close)"
		"[root] root" -> "[root] module.lambda (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/aws\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/external\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/local\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/null\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/random\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/template\"] (close)"
	}
}

